{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onDateChange","date","setState","onSubmit","state","loading","searchText","searchRegex","searchServer","process","API","guess","Date","streams","labels","values","input","selectorRegexp","match","query","regexp","trim","replace","console","log","_this2","url","concat","proxiedFetch","then","response","json","responseJson","catch","error","label","_this3","event","target","value","preventDefault","getLabels","_this4","dates","parsed","parseQuery","time","getTime","_this5","searchGit","paddingTop","display","justifyContent","backgroundColor","padding","react_default","a","createElement","className","style","margin","fontSize","width","flexDirection","float","position","marginLeft","fontWeight","entry_default","onChange","htmlFor","type","id","onChangeServer","onChangeHandle","App_UsersList","regex","Component","UsersList","class","props","map","stream","entries","entry","App_User","ts","line","e","React","User","title","highlighter_default","search","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.08061156.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n//import Autocomplete from  'react-autocomplete';\n//import { getStocks, matchStocks } from './labels';\n\nimport DateTimeRangePicker from '@wojtekmaj/react-datetimerange-picker';\nimport proxiedFetch from 'proxied-fetch';\n\nimport Highlight from 'react-highlighter';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      loading: false,\n      searchText: '',\n      searchRegex: '',\n      searchServer: process.env.API || 'http://127.0.0.1:3100',\n      guess: '',\n      date: [new Date(), new Date()],\n      streams: [],\n      labels: [],\n      values: []\n    };\n  }\n\n  parseQuery(input) {\n\t  const selectorRegexp = /(?:^|\\s){[^{]*}/g \n\t  const match = input.match(selectorRegexp);\n\t  let query = '';\n\t  let regexp = input;\n\n\t  if (match) {\n\t    query = match[0].trim();\n\t    regexp = input.replace(selectorRegexp, '').trim();\n\t  }\n\tconsole.log(query,regexp)\n    \treturn { query, regexp };\n  }\n\n\n  getLabels() {\n    var {searchServer} = this.state;\n    const url = `${searchServer}/api/prom/label`;\n    proxiedFetch(url)\n      .then(response => response.json())\n      .then(responseJson => this.setState({labels: responseJson.values}))\n      .catch(function(error) { console.log(error) });\n  }\n\n  getLabelValues(label) {\n    var {searchServer} = this.state;\n    const url = `${searchServer}/api/prom/label/${label}/values`\n    proxiedFetch(url)\n      .then(response => response.json())\n      .then(responseJson => this.setState({values: responseJson.values}))\n      .catch(function(error) { console.log(error) });\n  }\n\n  onDateChange = date => { this.setState({ date }); this.onSubmit() }\n\n  onChangeHandle(event) {\n    this.setState({searchText: event.target.value});\n  }\n  onChangeServer(event) {\n    event.preventDefault();\n    this.getLabels()\n    this.setState({searchServer: event.target.value});\n  }\n\n  onSubmit(event) {\n    if(event) event.preventDefault();\n    var {searchText} = this.state;\n    var {searchServer} = this.state;\n    var dates = this.state.date;\n    var parsed =  this.parseQuery(searchText);\n    this.setState({searchRegex: parsed.regexp});\n    const time = '&start=' + dates[0].getTime() + '000000' + '&end=' + dates[1].getTime() + '000000';\n    const url = `${searchServer}/api/prom/query?query=${parsed.query}&regexp=${parsed.regexp}` + time;\n    proxiedFetch(url)\n      .then(response => response.json())\n      .then(responseJson => this.setState({streams: responseJson.streams}))\n      .catch(function(error) { console.log(error) });\n  }\n\n\n  render() {\n\n    const left = {\n      width: \"20%\"\n    }\n    const right = {\n      width: \"80%\"\n    }\n\n    const logo = {\n      float: \"left\",\n      position: \"absolute\",\n      marginLeft: \"10px\",\n      fontWeight: \"bold\"\n    }\n\n    const search = {\n      margin: \"auto\",\n      fontSize: \"18px\",\n      width: \"100%\",\n      backgroundColor: \"#c9c9c9\",\n      display: \"flex\",\n      flexDirection: \"column\"\n    }\n\n    const searchGit = {\n      paddingTop: \"10px\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      backgroundColor: \"#808080\",\n      padding: \"10px\"\n    }\n\n    let isLoading = this.loading ? \"Loading....\" : \"\"\n\n    return (\n    <div className=\"App\">\n\n      <div style={search}>\n        <div style={logo}>Peek-Loki</div>\n\t<DateTimeRangePicker\n          onChange={this.onDateChange}\n\t  onSubmit={event => this.onSubmit(event)}\n          value={this.state.date}\n        />\n        <div>\n\t    <div className=\"float\" style={left}>\n\t        <form style={searchGit} onSubmit={event => true }>\n\t          <label htmlFor=\"searchServer\">Server </label>\n\t          <input\n\t            type=\"text\"\n\t            id=\"searchServer\"\n\t            value={this.state.searchServer}\n\t            onChange={event => this.onChangeServer(event)}\n\t\t    className=\"searchForm formField\"/>\n\t        </form>\n\t    </div>\n\t    <div className=\"float\" style={right}>\n\t        <form style={searchGit} onSubmit={event => this.onSubmit(event)}>\n\t          <label htmlFor=\"searchTextForm\">Search </label>\n\t          <input\n\t            type=\"text\"\n\t            id=\"searchTextForm\"\n\t            onChange={event => this.onChangeHandle(event)}\n\t            value={this.state.searchText}\n\t\t    className=\"searchForm formField\"/>\n\t\t    <button>Search</button>\n\t        </form>\n\t    </div>\n        </div>\n        <UsersList streams={this.state.streams} regex={this.state.searchRegex}/>\n      </div>\n    </div>\n    );\n\n  }\n}\n\nclass UsersList extends React.Component {\n  get streams() {\n    try {\n        const regex = this.props.regex;\n    \treturn this.props.streams.map(function (stream) {\n    \t    return stream.entries.map(function (entry) {\n    \t      \treturn <User ts={entry.ts} line={entry.line} regex={regex}/>\n    \t    });\n    \t});\n    } catch(e) {\n\t\treturn <User ts=\"\" line=\"No Results\" regex={this.props.regex}/>\n    }\n  }\n\n  render() {\n    const searchResult = {\n      paddingTop: \"20px\",\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      flexDirection: \"column\",\n      backgroundColor: \"#CFD2E1\"\n    }\n\n    return (\n\n      <div class=\"logs-rows\">\n        {this.streams}\n      </div>\n\n    )\n  }\n}\n\n\nclass User extends React.Component {\n\n  render() {\n    const searchUser = {\n      display: 'flex',\n      flexDirection: 'row',\n      paddingLeft: '2%',\n      fontSize: '14px',\n      textAlign: 'left',\n      maxWidth: '90%'\n    }\n\n    const userAvatar = {\n      maxWidth: '100px',\n      maxHeight: '100px',\n      margin: '15px',\n      boxShadow: \"1px 1px 1px #808080\"\n    }\n\n    const userName = {\n      display: 'flex',\n      alignItems: 'center',\n      textDecoration: 'none'\n    }\n\n    return (\n\n      <div class=\"logs-row\">\n        <div class=\"logs-row__level logs-row__level--info\"></div>\n        <div class=\"logs-row__time\" title=\"{this.props.ts}\">{this.props.ts}</div>\n        <div class=\"logs-row__message\"><span><span class=\"\"> <Highlight search={this.props.regex}>{this.props.line}</Highlight></span></span>\n        </div>\n      </div>\n\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}