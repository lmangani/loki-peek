{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onDateChange","date","setState","state","searchText","searchServer","process","API","Date","streams","input","selectorRegexp","match","query","regexp","trim","replace","console","log","event","target","value","_this2","preventDefault","dates","parsed","parseQuery","time","getTime","url","concat","proxiedFetch","then","response","json","responseJson","catch","error","_this3","searchGit","paddingTop","display","justifyContent","backgroundColor","padding","react_default","a","createElement","className","style","margin","fontSize","width","flexDirection","entry_default","onChange","htmlFor","type","id","onChangeServer","onSubmit","onChangeHandle","App_UsersList","Component","UsersList","props","map","stream","entries","entry","App_User","ts","line","e","React","User","paddingLeft","textAlign","maxWidth","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aa12ee69.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport DateTimeRangePicker from '@wojtekmaj/react-datetimerange-picker';\nimport proxiedFetch from 'proxied-fetch';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      searchText: '',\n      searchServer: process.env.API || 'http://127.0.0.1:3100',\n      date: [new Date(), new Date()],\n      streams: []\n    };\n  }\n\n  parseQuery(input) {\n\t  const selectorRegexp = /(?:^|\\s){[^{]*}/g \n\t  const match = input.match(selectorRegexp);\n\t  let query = '';\n\t  let regexp = input;\n\n\t  if (match) {\n\t    query = match[0].trim();\n\t    regexp = input.replace(selectorRegexp, '').trim();\n\t  }\n\tconsole.log(query,regexp)\n    \treturn { query, regexp };\n  }\n\n  onDateChange = date => this.setState({ date })\n\n  onChangeHandle(event) {\n    this.setState({searchText: event.target.value});\n  }\n  onChangeServer(event) {\n    this.setState({searchServer: event.target.value});\n  }\n\n  onSubmit(event) {\n    event.preventDefault();\n    var {searchText} = this.state;\n    var {searchServer} = this.state;\n    var dates = this.state.date;\n    var parsed =  this.parseQuery(searchText);\n    const time = '&start=' + dates[0].getTime() + '000000' + '&end=' + dates[1].getTime() + '000000';\n    const url = `${searchServer}/api/prom/query?query=${parsed.query}&regexp=${parsed.regexp}` + time;\n    proxiedFetch(url)\n      .then(response => response.json())\n      .then(responseJson => this.setState({streams: responseJson.streams}))\n      .catch(function(error) { console.log(error) });\n  }\n\n\n\n  render() {\n\n    const left = {\n      width: \"20%\"\n    }\n    const right = {\n      width: \"80%\"\n    }\n    const search = {\n      margin: \"auto\",\n      fontSize: \"18px\",\n      width: \"100%\",\n      backgroundColor: \"#c9c9c9\",\n      display: \"flex\",\n      flexDirection: \"column\"\n    }\n\n    const searchGit = {\n      paddingTop: \"10px\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      backgroundColor: \"#808080\",\n      padding: \"10px\"\n    }\n\n\n    return (\n    <div className=\"App\">\n      <div style={search}>\n\t<DateTimeRangePicker\n          onChange={this.onDateChange}\n          value={this.state.date}\n        />\n        <div>\n\t    <div className=\"float\" style={left}>\n\t        <form style={searchGit}>\n\t          <label htmlFor=\"searchServer\">Server </label>\n\t          <input\n\t            type=\"text\"\n\t            id=\"searchServer\"\n\t            value={this.state.searchServer}\n\t            onChange={event => this.onChangeServer(event)}\n\t\t    className=\"searchForm\"/>\n\t        </form>\n\t    </div>\n\t    <div className=\"float\" style={right}>\n\t        <form style={searchGit} onSubmit={event => this.onSubmit(event)}>\n\t          <label htmlFor=\"searchTextForm\">Search </label>\n\t          <input\n\t            type=\"text\"\n\t            id=\"searchTextForm\"\n\t            onChange={event => this.onChangeHandle(event)}\n\t            value={this.state.searchText}\n\t\t    className=\"searchForm\"/>\n\t        </form>\n\t    </div>\n        </div>\n        <UsersList streams={this.state.streams}/>\n      </div>\n    </div>\n    );\n\n  }\n}\n\nclass UsersList extends React.Component {\n  get streams() {\n    try {\n    \treturn this.props.streams.map(function (stream) {\n    \t    return stream.entries.map(function (entry) {\n    \t      \treturn <User ts={entry.ts} line={entry.line}/>\n    \t    });\n    \t});\n    } catch(e) {\n\t\treturn <User ts=\"\" line=\"No Results\"/>\n    }\n  }\n\n  render() {\n    const searchResult = {\n      paddingTop: \"20px\",\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      flexDirection: \"column\",\n      backgroundColor: \"#CFD2E1\"\n    }\n\n    return (\n      <div style={searchResult}>\n        {this.streams}\n      </div>\n    )\n  }\n}\n\n\nclass User extends React.Component {\n  render() {\n    const searchUser = {\n      display: 'flex',\n      flexDirection: 'row',\n      paddingLeft: '2%',\n      fontSize: '14px',\n      textAlign: 'left',\n      maxWidth: '90%'\n    }\n\n    const userAvatar = {\n      maxWidth: '100px',\n      maxHeight: '100px',\n      margin: '15px',\n      boxShadow: \"1px 1px 1px #808080\"\n    }\n\n    const userName = {\n      display: 'flex',\n      alignItems: 'center',\n      textDecoration: 'none'\n    }\n\n    return (\n        <div style={searchUser}>\n          <p>{this.props.ts}: {this.props.line}</p>\n        </div>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}